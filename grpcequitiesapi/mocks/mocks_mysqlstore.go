// Code generated by MockGen. DO NOT EDIT.
// Source: grpcequitiesapi/internals/adapter/pgsql/query (interfaces: MySQLDBStoreAccess,DBStorer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "grpcequitiesapi/internals/adapter/pgsql/entities"
	request "grpcequitiesapi/pkg/v1/models/request"
	response "grpcequitiesapi/pkg/v1/models/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMySQLDBStoreAccess is a mock of MySQLDBStoreAccess interface.
type MockMySQLDBStoreAccess struct {
	ctrl     *gomock.Controller
	recorder *MockMySQLDBStoreAccessMockRecorder
}

// MockMySQLDBStoreAccessMockRecorder is the mock recorder for MockMySQLDBStoreAccess.
type MockMySQLDBStoreAccessMockRecorder struct {
	mock *MockMySQLDBStoreAccess
}

// NewMockMySQLDBStoreAccess creates a new mock instance.
func NewMockMySQLDBStoreAccess(ctrl *gomock.Controller) *MockMySQLDBStoreAccess {
	mock := &MockMySQLDBStoreAccess{ctrl: ctrl}
	mock.recorder = &MockMySQLDBStoreAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMySQLDBStoreAccess) EXPECT() *MockMySQLDBStoreAccessMockRecorder {
	return m.recorder
}

// CreateMerchant mocks base method.
func (m *MockMySQLDBStoreAccess) CreateMerchant(arg0 context.Context, arg1 *entities.Merchant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMerchant", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMerchant indicates an expected call of CreateMerchant.
func (mr *MockMySQLDBStoreAccessMockRecorder) CreateMerchant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMerchant", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).CreateMerchant), arg0, arg1)
}

// CreateMerchantMember mocks base method.
func (m *MockMySQLDBStoreAccess) CreateMerchantMember(arg0 context.Context, arg1 *entities.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMerchantMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMerchantMember indicates an expected call of CreateMerchantMember.
func (mr *MockMySQLDBStoreAccessMockRecorder) CreateMerchantMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMerchantMember", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).CreateMerchantMember), arg0, arg1)
}

// CreateOrderProcessed mocks base method.
func (m *MockMySQLDBStoreAccess) CreateOrderProcessed(arg0 context.Context, arg1 *entities.OrdersProcessed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderProcessed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderProcessed indicates an expected call of CreateOrderProcessed.
func (mr *MockMySQLDBStoreAccessMockRecorder) CreateOrderProcessed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderProcessed", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).CreateOrderProcessed), arg0, arg1)
}

// GetMerchantList mocks base method.
func (m *MockMySQLDBStoreAccess) GetMerchantList(arg0 context.Context, arg1 *[]response.MerchantResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMerchantList indicates an expected call of GetMerchantList.
func (mr *MockMySQLDBStoreAccessMockRecorder) GetMerchantList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantList", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).GetMerchantList), arg0, arg1)
}

// GetOrderProcessedList mocks base method.
func (m *MockMySQLDBStoreAccess) GetOrderProcessedList(arg0 context.Context, arg1 *[]response.OrdersProcessedResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderProcessedList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrderProcessedList indicates an expected call of GetOrderProcessedList.
func (mr *MockMySQLDBStoreAccessMockRecorder) GetOrderProcessedList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderProcessedList", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).GetOrderProcessedList), arg0, arg1)
}

// ListMembersByCode mocks base method.
func (m *MockMySQLDBStoreAccess) ListMembersByCode(arg0 context.Context, arg1 *[]response.MerchantsMembersResponse, arg2 request.QueryMembersInputRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersByCode", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersByCode indicates an expected call of ListMembersByCode.
func (mr *MockMySQLDBStoreAccessMockRecorder) ListMembersByCode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersByCode", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).ListMembersByCode), arg0, arg1, arg2)
}

// ListMerchantByID mocks base method.
func (m *MockMySQLDBStoreAccess) ListMerchantByID(arg0 context.Context, arg1 *[]response.MerchantResponse, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMerchantByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMerchantByID indicates an expected call of ListMerchantByID.
func (mr *MockMySQLDBStoreAccessMockRecorder) ListMerchantByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMerchantByID", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).ListMerchantByID), arg0, arg1, arg2)
}

// ListOrderProcessedByID mocks base method.
func (m *MockMySQLDBStoreAccess) ListOrderProcessedByID(arg0 context.Context, arg1 *[]response.OrdersProcessedResponse, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderProcessedByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrderProcessedByID indicates an expected call of ListOrderProcessedByID.
func (mr *MockMySQLDBStoreAccessMockRecorder) ListOrderProcessedByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderProcessedByID", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).ListOrderProcessedByID), arg0, arg1, arg2)
}

// LoginUserByEmailID mocks base method.
func (m *MockMySQLDBStoreAccess) LoginUserByEmailID(arg0 context.Context, arg1 *[]response.UserLoginResponse, arg2 request.LoginUserInputRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUserByEmailID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginUserByEmailID indicates an expected call of LoginUserByEmailID.
func (mr *MockMySQLDBStoreAccessMockRecorder) LoginUserByEmailID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUserByEmailID", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).LoginUserByEmailID), arg0, arg1, arg2)
}

// UpdateMerchantByID mocks base method.
func (m *MockMySQLDBStoreAccess) UpdateMerchantByID(arg0 context.Context, arg1 *entities.Merchant, arg2 map[string]interface{}, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMerchantByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMerchantByID indicates an expected call of UpdateMerchantByID.
func (mr *MockMySQLDBStoreAccessMockRecorder) UpdateMerchantByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchantByID", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).UpdateMerchantByID), arg0, arg1, arg2, arg3)
}

// UpdateOrderProcessedByID mocks base method.
func (m *MockMySQLDBStoreAccess) UpdateOrderProcessedByID(arg0 context.Context, arg1 *entities.OrdersProcessed, arg2 map[string]interface{}, arg3 request.UpdateOrderProcessedInputRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderProcessedByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderProcessedByID indicates an expected call of UpdateOrderProcessedByID.
func (mr *MockMySQLDBStoreAccessMockRecorder) UpdateOrderProcessedByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderProcessedByID", reflect.TypeOf((*MockMySQLDBStoreAccess)(nil).UpdateOrderProcessedByID), arg0, arg1, arg2, arg3)
}

// MockDBStorer is a mock of DBStorer interface.
type MockDBStorer struct {
	ctrl     *gomock.Controller
	recorder *MockDBStorerMockRecorder
}

// MockDBStorerMockRecorder is the mock recorder for MockDBStorer.
type MockDBStorerMockRecorder struct {
	mock *MockDBStorer
}

// NewMockDBStorer creates a new mock instance.
func NewMockDBStorer(ctrl *gomock.Controller) *MockDBStorer {
	mock := &MockDBStorer{ctrl: ctrl}
	mock.recorder = &MockDBStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBStorer) EXPECT() *MockDBStorerMockRecorder {
	return m.recorder
}

// DBConn mocks base method.
func (m *MockDBStorer) DBConn(arg0 string) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBConn", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBConn indicates an expected call of DBConn.
func (mr *MockDBStorerMockRecorder) DBConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBConn", reflect.TypeOf((*MockDBStorer)(nil).DBConn), arg0)
}
